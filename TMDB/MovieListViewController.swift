//
//  MovieListViewController.swift
//  TMDB
//
//  Created by ankit on 15/07/17.
//  Copyright (c) 2017 test. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MovieListDisplayLogic: class{
    func displayFetchedError(viewModel : MovieList.FetchMovieList.ViewModel)
    func insertMovie(viewModel : MovieList.InsertedMovie.ViewModel)
}

class MovieListViewController: UIViewController, MovieListDisplayLogic
{
    var interactor: (MovieListBusinessLogic & MovieListDataStore)?
    var router: (NSObjectProtocol & MovieListRoutingLogic & MovieListDataPassing)?
    var currentPage : Int = 0 {
        didSet{
            fetchMovies(nextPage: currentPage)
        }
    }
    @IBOutlet var movieTableView : UITableView?
    @IBOutlet var filterView : UIView?
    @IBOutlet var minYearTxtFld : UITextField?
    @IBOutlet var maxYearTxtFld : UITextField?
    @IBOutlet var yearPicker : UIPickerView?
    @IBOutlet weak var filterViewTopConstraint: NSLayoutConstraint?
    
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = MovieListInteractor()
        interactor.initializeFRC()
        let presenter = MovieListPresenter()
        let router = MovieListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        currentPage = 1
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        configureInputView()
    }
    
    // MARK:- Configure input views
    
    func configureInputView()  {
        self.minYearTxtFld?.inputView = yearPicker
        self.maxYearTxtFld?.inputView = yearPicker
    }
    
    // MARK:- IBAction
    
    @IBAction func toggleFilterView(_ sender: UIBarButtonItem) {
        if sender.tag == 0 {
            sender.tag = 1
            sender.title = "Done"
            
            let filterViewFrame = self.filterView?.frame
            let targetFrame = CGRect(x: (filterViewFrame?.origin.x)!, y:  64, width: (filterViewFrame?.size.width)!, height: (filterViewFrame?.size.height)!)
            
            UIView.animate(withDuration: 0.4, delay: 0.9, usingSpringWithDamping: 0.5, initialSpringVelocity: 05, options: .curveEaseInOut, animations: {
                self.filterView?.alpha = 1.0
                self.filterView?.frame = targetFrame
                
            }, completion: { (true) in
                self.filterViewTopConstraint?.constant = 0
            })
        }else{
            sender.tag = 0
            sender.title = "Filter"
            let filterViewFrame = self.filterView?.frame
            let targetFrame = CGRect(x: (filterViewFrame?.origin.x)!, y: 0, width: (filterViewFrame?.size.width)!, height: (filterViewFrame?.size.height)!)
            
            UIView.animate(withDuration: 0.4, delay: 0.9, usingSpringWithDamping: 0.5, initialSpringVelocity: 05, options: .curveLinear, animations: {
                 self.filterView?.alpha = 0.0
                self.filterView?.frame = targetFrame
            },completion: { (true) in
                self.filterViewTopConstraint?.constant = -64
                self.view.endEditing(true)
            })
            createFilterPredicate(minYearTxt: minYearTxtFld?.text, maxYearTxt: maxYearTxtFld?.text)
            
        }
    }

    // MARK:- Filter
    func createFilterPredicate(minYearTxt : String? , maxYearTxt: String?)  {
        var filterPredicate : NSPredicate
        var minYear = -1
        var maxYear = -1
        if (minYearTxt?.characters.count)! > 0 {
            minYear = Int(minYearTxt!)!
        }
        if (maxYearTxt?.characters.count)! > 0{
            maxYear = Int(maxYearTxt!)!
        }
        if (minYear != -1 && maxYear != -1){
            if (minYear < maxYear){
                filterPredicate = NSPredicate(format: "releaseYear >= %d AND releaseYear <= %d", Int64(minYear), Int64( maxYear))
                applyFilter(filterPredicate: filterPredicate)
            }else{
                showInvalidFilterMessage()
            }
        }else if (minYear != -1){
            filterPredicate = NSPredicate(format: "releaseYear >= %d ", Int64(minYear))
            applyFilter(filterPredicate: filterPredicate)
        }else if (maxYear != -1){
            filterPredicate = NSPredicate(format: "releaseYear <= %d", Int64(maxYear))
            applyFilter(filterPredicate: filterPredicate)
        }
        //print(filterPredicate)
    }
    func applyFilter(filterPredicate : NSPredicate) {
        interactor?.applyPredicateToMovieList(request: MovieList.ApplyPredicate.Request(generatedPredicate: filterPredicate))
        movieTableView?.reloadData()
    }
    func showInvalidFilterMessage()  {
        let alert = UIAlertController(title: "Error", message: "Invalid Filter Parameters", preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: String.localizedStringWithFormat(NSLocalizedString("OK", comment: "OK Text")), style:.default, handler: nil))
        self.present(alert, animated: true, completion: nil)
        
    }

    // MARK: display logic
    func fetchMovies(nextPage : Int){
        let request = MovieList.FetchMovieList.Request(pageNumber: nextPage)
        interactor?.fetchMovieListFromServer(request: request)
    }
    func displayFetchedError(viewModel : MovieList.FetchMovieList.ViewModel){
        let alert = UIAlertController(title: "Error", message: viewModel.errorMsg, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: String.localizedStringWithFormat(NSLocalizedString("OK", comment: "OK Text")), style:.default, handler: nil))
        DispatchQueue.main.async {
            self.present(alert, animated: true, completion: nil)
        }
    }
    func insertMovie(viewModel : MovieList.InsertedMovie.ViewModel){
        self.movieTableView?.insertRows(at: [viewModel.indexPath], with: .fade)
        if let cell = self.movieTableView?.cellForRow(at: viewModel.indexPath) as? MovieListTableViewCell{
            cell.titleLBL?.text = viewModel.movieTitle
            cell.releaseDateLBL?.text = String(viewModel.releaseYear)
        }
    }
   
}

extension MovieListViewController : UITableViewDataSource , UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        let rows =  self.interactor!.numberOfMovies()
        return rows
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "MovieListTableViewCell") as? MovieListTableViewCell
                return cell!
    }
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        let movie = interactor?.movieAt(indexpath: indexPath)
        let myCell = cell as? MovieListTableViewCell
        myCell?.titleLBL?.text = (movie?.title)!
        myCell?.releaseDateLBL?.text = String((movie?.releaseYear)!)
        myCell?.ratingLBL?.text = String(((movie?.rating)?.floatValue)!)
        myCell?.posterImageView?.image = UIImage(named: "placeholder")
        if let unwrappedURL = movie?.posterURL{
            interactor?.posterImageForMovie(url: unwrappedURL, completionHandler: { (result : ImageFetchResult<UIImage>) in
                switch (result) {
                case .Success(let image) :
                    DispatchQueue.main.async {
                        myCell?.posterImageView?.image = image
                    }
                case .Failure(let error) :
                    print(error.localizedDescription)
                }
                
            })
        }
        let rowCount = tableView.numberOfRows(inSection: 0)
        if (indexPath.row == (rowCount-1)) {
            print("******************************last page sp fetch next*********************")
            currentPage = currentPage + 1
        }
    }
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 170
    }
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let storyboard = UIStoryboard(name: "Main", bundle: nil)
        let movieDetailVC = storyboard.instantiateViewController(withIdentifier: "MovieDetailTableViewController") as! MovieDetailTableViewController
        movieDetailVC.targetMovie = interactor?.movieAt(indexpath: indexPath)
        self.navigationController?.pushViewController(movieDetailVC, animated: true)
    }
}

extension MovieListViewController : UIPickerViewDataSource, UIPickerViewDelegate{
    func numberOfComponents(in pickerView: UIPickerView) -> Int{
        return 1
    }
    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int{
        return 25
    }
    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String?{
        let calendar = Calendar.current
        let year = calendar.component(.year , from: Date())
        return String(year-row)
    }
    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int){
        let calendar = Calendar.current
        let year = calendar.component(.year , from: Date())
        let selectedYear =  String(year-row)
        if (self.minYearTxtFld?.isFirstResponder)!{
            self.minYearTxtFld?.text = selectedYear
            validateMinDate()
            
        }else{
            self.maxYearTxtFld?.text = selectedYear
            validateMaxDate()
        }
    }
    
    //MARK:- Validate
    func validateMinDate()  {
        if let maxYearStr = maxYearTxtFld?.text{
            if let maxYear = Int(maxYearStr){
                let minYear = Int ((minYearTxtFld?.text)!)
                if minYear! > maxYear{
                    minYearTxtFld?.shake()
                    minYearTxtFld?.textColor = UIColor.red
                }else{
                    minYearTxtFld?.textColor = UIColor.black
                    maxYearTxtFld?.textColor = UIColor.black
                }
            }
        }
    }
    func validateMaxDate()  {
        if let minYearStr = minYearTxtFld?.text{
            if let minYear = Int(minYearStr){
                let maxYear = Int ((maxYearTxtFld?.text)!)
                if minYear > maxYear!{
                    maxYearTxtFld?.shake()
                    maxYearTxtFld?.textColor = UIColor.red
                }else{
                    maxYearTxtFld?.textColor = UIColor.black
                    minYearTxtFld?.textColor = UIColor.black
                }
            }
            
        }
    }
    
}
