//
//  MovieListWorker.swift
//  TMDB
//
//  Created by ankit on 15/07/17.
//  Copyright (c) 2017 test. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MoviesStoreProtocol{
    func fetchMovies(pageNuber : Int, completionHandler: @escaping MoviesStoreFetchOrdersCompletionHandler)
    func createMovie(movieToCreate: Movie, completionHandler: @escaping MoviesStoreCreateOrderCompletionHandler)
    func deleteMovie(movieID: NSNumber, completionHandler: @escaping MoviesStoreDeleteOrderCompletionHandler)
}

class MovieListWorker
{
    var moviesStore : MoviesStoreProtocol
    init(moviesStore : MoviesStoreProtocol) {
        self.moviesStore = moviesStore
    }
    
    func fetchMovies(pageNuber : Int,  completionHandler :  @escaping MoviesStoreFetchOrdersCompletionHandler)  {
        moviesStore.fetchMovies(pageNuber: pageNuber, completionHandler: completionHandler)
    }
    func createMovie(movieToCreate: Movie, completionHandler: @escaping MoviesStoreCreateOrderCompletionHandler){
       moviesStore.createMovie(movieToCreate: movieToCreate, completionHandler: completionHandler)
    }
    func deleteMovie(movieID: NSNumber, completionHandler: @escaping MoviesStoreDeleteOrderCompletionHandler){
        moviesStore.deleteMovie(movieID: movieID, completionHandler: completionHandler)
    }
}

struct FetchError {
    var errorMsg : String
    init(errorMsg : String) {
        self.errorMsg = errorMsg
    }
}

// MARK: - Orders store CRUD operation results

typealias MoviesStoreFetchOrdersCompletionHandler = (MoviesStoreResult<[Movie]>) -> Void
typealias MoviesStoreFetchOrderCompletionHandler = (MoviesStoreResult<Movie>) -> Void
typealias MoviesStoreCreateOrderCompletionHandler = (MoviesStoreResult<Movie>) -> Void
typealias MoviesStoreUpdateOrderCompletionHandler = (MoviesStoreResult<Movie>) -> Void
typealias MoviesStoreDeleteOrderCompletionHandler = (MoviesStoreResult<Movie>) -> Void

enum MoviesStoreResult<U>
{
    case Success(result: U)
    case Failure(error: MoviesStoreError)
}


// MARK: - Orders store CRUD operation errors

enum MoviesStoreError: Equatable, Error
{
    case CannotFetch(String)
    case CannotCreate(String)
    case CannotUpdate(String)
    case CannotDelete(String)
}

func ==(lhs: MoviesStoreError, rhs: MoviesStoreError) -> Bool
{
    switch (lhs, rhs) {
    case (.CannotFetch(let a), .CannotFetch(let b)) where a == b: return true
    case (.CannotCreate(let a), .CannotCreate(let b)) where a == b: return true
    case (.CannotUpdate(let a), .CannotUpdate(let b)) where a == b: return true
    case (.CannotDelete(let a), .CannotDelete(let b)) where a == b: return true
    default: return false
    }
}
